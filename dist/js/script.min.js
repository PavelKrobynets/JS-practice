/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\"Use strict\";\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  // Tabs\n\n  const tabs = document.querySelectorAll(\".tabheader__item\"),\n    tabsContent = document.querySelectorAll(\".tabcontent\"),\n    tabsParrent = document.querySelector(\".tabheader__items\");\n\n  function hidetabContent() {\n    tabsContent.forEach((item) => {\n      item.classList.remove(\"show\", \"fade\");\n      item.classList.add(\"hide\");\n    });\n\n    tabs.forEach((tab) => {\n      tab.classList.remove(\"tabheader__item_active\");\n    });\n  }\n\n  function showTabContent(i = 0) {\n    tabsContent[i].classList.remove(\"hide\");\n    tabsContent[i].classList.add(\"show\", \"fade\");\n    tabs[i].classList.add(\"tabheader__item_active\");\n  }\n\n  hidetabContent();\n  showTabContent();\n\n  tabsParrent.addEventListener(\"click\", (event) => {\n    const target = event.target;\n\n    if (target && target.classList.contains(\"tabheader__item\")) {\n      tabs.forEach((item, i) => {\n        if (target == item) {\n          hidetabContent();\n          showTabContent(i);\n        }\n      });\n    }\n  });\n\n  //Timer\n\n  const deadline = \"2024-05-20\";\n\n  function getTimeRemaining(endTime) {\n    let days, hours, minutes, seconds;\n    const t = Date.parse(endTime) - Date.parse(new Date());\n\n    if (t <= 0) {\n      days = 0;\n      hours = 0;\n      minutes = 0;\n      seconds = 0;\n    } else {\n      days = Math.floor(t / (1000 * 60 * 60 * 24));\n      hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n      minutes = Math.floor((t / (1000 * 60)) % 60);\n      seconds = Math.floor((t / 1000) % 60);\n    }\n    return {\n      total: t,\n      days: days,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n    };\n  }\n\n  function getZero(num) {\n    if (num >= 0 && num < 10) {\n      return `0${num}`;\n    } else {\n      return num;\n    }\n  }\n\n  function setClock(selector, endTime) {\n    const timer = document.querySelector(selector),\n      days = timer.querySelector(\"#days\"),\n      hours = timer.querySelector(\"#hours\"),\n      minutes = timer.querySelector(\"#minutes\"),\n      seconds = timer.querySelector(\"#seconds\"),\n      timeInterval = setInterval(updateClock, 1000);\n\n    updateClock();\n\n    function updateClock() {\n      const t = getTimeRemaining(endTime);\n\n      days.innerHTML = getZero(t.days);\n      hours.innerHTML = getZero(t.hours);\n      minutes.innerHTML = getZero(t.minutes);\n      seconds.innerHTML = getZero(t.seconds);\n\n      if (t.total <= 0) {\n        clearInterval(timeInterval);\n      }\n    }\n  }\n  setClock(\".timer\", deadline);\n\n  // Modal\n\n  const modalTrigger = document.querySelectorAll(\"[data-modal]\"),\n    modal = document.querySelector(\".modal\"),\n    modalCloseBtn = document.querySelector(\"[data-close]\");\n\n\t\tmodalTrigger.forEach(btn => {\n\t\t\tbtn.addEventListener(\"click\", () => {\n\t\t\t\t// modal.classList.add(\"visible\");\n\t\t\t\t// modal.classList.remove(\"hidden\");\n\t\t\t\tmodal.classList.toggle('visible');\n\t\t\t\tdocument.body.style.overflow = \"hidden\";\n\t\t\t});\n\t\t});\n\n  modalCloseBtn.addEventListener(\"click\", () => {\n    // modal.classList.add(\"hidden\");\n    // modal.classList.remove(\"visible\");\n\t\tmodal.classList.toggle('visible');\n\t\tdocument.body.style.overflow = \"visible\";\n  });\n});\n\n\n//# sourceURL=webpack://gulp_struct/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;